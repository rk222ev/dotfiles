* A secure Emacs environment

Great article why [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your editor is malware]]. The following basically sets up the configuration to adhere to the
articles recommondations.

#+BEGIN_SRC shell :exports none
python -m pip install --user certifi
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;  (if (fboundp 'gnutls-available-p)
  ;;      (fmakunbound 'gnutls-available-p))

  (require 'cl)
  (setq tls-checktrust t)

  (setq python (or (executable-find "py.exe")
                   (executable-find "python")
                   ))

  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string (concat python " -m certifi"))))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error t)
    (setq gnutls-trustfiles (list trustfile)))

  ;; Test the settings by using the following code snippet:
  ;;  (let ((bad-hosts
  ;;         (loop for bad
  ;;               in `("https://wrong.host.badssl.com/"
  ;;                    "https://self-signed.badssl.com/")
  ;;               if (condition-case e
  ;;                      (url-retrieve
  ;;                       bad (lambda (retrieved) t))
  ;;                    (error nil))
  ;;               collect bad)))
  ;;    (if bad-hosts
  ;;        (error (format "tls misconfigured; retrieved %s ok" bad-hosts))
  ;;      (url-retrieve "https://badssl.com"
  ;;                    (lambda (retrieved) t))))
#+END_SRC

* Locale

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

* Evil

Vim or Emacs? Why not Vim in Emacs!

Must be set to nil to allow for evil-collection to work properly.
#+BEGIN_SRC emacs-lisp
  (setq evil-want-integration nil)
#+END_SRC

Load and use evil and friends
#+BEGIN_SRC emacs-lisp
 (add-to-list 'load-path "~/.emacs.d/evil")
 (require 'evil)
 (evil-mode 1)
 (global-evil-surround-mode 1)
#+END_SRC

Init evil-collection
#+BEGIN_SRC emacs-lisp
  (evil-collection-init)
#+END_SRC

Evil binds M-. to evil-repeat-pop-next. But I prefer ciders cider-find-var
so unbind M-. in the evil normal mode.
#+BEGIN_SRC emacs-lisp
(eval-after-load "evil-maps"
  '(progn
     (define-key evil-normal-state-map  "\M-." 'nil)))
#+END_SRC

* Editing

Emacs can automatically create backup files. This tells Emacs to
put all backups in ~/.emacs.d/backups. More info:
http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                              "backups"))))
(setq auto-save-default nil)
#+end_src

Comments
#+begin_src emacs-lisp
(defun toggle-comment-on-line ()
  "comment or uncomment current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
(global-set-key (kbd "C-;") 'toggle-comment-on-line)
#+end_src

No need for ~ files when editing
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

Go straight to scratch buffer on startup
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

Automatically follow symlinks
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

Delete trailing whitespace on save
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Calendar

Make monday the first day of the week.
#+begin_src emacs-lisp
(setq calendar-week-start-day 1)
#+end_src


Add week numbers
#+begin_src emacs-lisp
(copy-face font-lock-constant-face 'calendar-iso-week-face)
(set-face-attribute 'calendar-iso-week-face nil :height 0.7)
(setq calendar-intermonth-text
      '(propertize
        (format "%2d"
                (car
                 (calendar-iso-from-absolute
                  (calendar-absolute-from-gregorian (list month day year)))))
        'font-lock-face 'calendar-iso-week-face))
#+end_src

* Languages
** Clojure

#+BEGIN_SRC emacs_lisp
(add-hook 'cider-mode-hook 'eldoc-mode)
#+END_SRC

Enable paredit in your REPL
#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook 'enable-paredit-mode)
#+end_src

#+BEGIN_SRC emacs-lisp
(require 'clj-refactor)

(defun my-clojure-mode-hook ()
 (clj-refactor-mode 1)
 (yas-minor-mode 1)        ; for adding require/use/import statements
 ;; This choice of keybinding leaves cider-macroexpand-1 unbound
 (cljr-add-keybindings-with-prefix "C-c C-<m>"))

(add-hook 'clojure-mode-hook #'my-clojure-mode-hook)
#+END_SRC

** Elisp

  Automatically load paredit when editing a lisp file
  More at http://www.emacswiki.org/emacs/ParEdit

  #+begin_src emacs-lisp
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  #+end_src

  eldoc-mode shows documentation in the minibuffer when writing code
  http://www.emacswiki.org/emacs/ElDoc

  #+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
  #+end_src

 Lisp-friendly hippie expand
 #+begin_src emacs-lisp
 (setq hippie-expand-try-functions-list
       '(try-expand-dabbrev
         try-expand-dabbrev-all-buffers
         try-expand-dabbrev-from-kill
         try-complete-lisp-symbol-partially
         try-complete-lisp-symbol))
 #+end_src

 #+begin_src emacs-lisp
 (show-paren-mode 1)
 (setq-default indent-tabs-mode nil)
 #+end_src
* Lib

#+BEGIN_SRC emacs-lisp
  (defun load-directory (dir)
        (let ((load-it (lambda (f)
   (load-file (concat (file-name-as-directory dir) f)))))
          (mapc load-it (directory-files dir nil "\\.el$"))))
      (load-directory "~/.emacs.d/lib/")
#+END_SRC

* Magit

#+begin_src emacs-lisp
(require 'evil-magit)
#+end_src
* Org

Use hjkl instead of arrows for moving items
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil-maps
  (define-key org-mode-map "\M-j" #'org-metadown)
  (define-key org-mode-map "\M-k" #'org-metaup)
  (define-key org-mode-map "\M-h" #'org-metaleft)
  (define-key org-mode-map "\M-l" #'org-metaright))
#+END_SRC

* Projectile

#+BEGIN_SRC emacs-lisp
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

Projectile everywhere!
#+begin_src emacs-lisp
(projectile-global-mode)
#+end_src

* Shell integration

Ever find that a command works in your shell, but not in Emacs?
This happens a lot on OS X, where an Emacs instance started from the GUI inherits a default set of environment variables.
This library solves this problem by copying important environment variables from the user's shell: it works by asking your shell to print out the variables of interest, then copying them into the Emacs environment.

For more info see:
https://github.com/purcell/exec-path-from-shell

#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-envs
   '("PATH")))
#+END_SRC

* Slime

Sets the slime compiler to use Steelbank common lisp
#+BEGIN_SRC emacs-lisp
(setq inferior-lisp-program "/usr/local/bin/sbcl")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(eval-after-load "slime"
  '(progn
     (slime-setup '(
                    slime-asdf
                    slime-autodoc
                    slime-editing-commands
                    slime-fancy-inspector
                    slime-fontifying-fu
                    slime-fuzzy
                    slime-indentation
                    slime-mdot-fu
                    slime-package-fu
                    slime-references
                    slime-repl
                    slime-sbcl-exts
                    slime-scratch
                    slime-xref-browser
                    ))
     (slime-autodoc-mode)
     (setq slime-complete-symbol*-fancy t)
     (setq slime-complete-symbol-function
  'slime-fuzzy-complete-symbol)))

(require 'slime)
#+END_SRC
* Shortcuts

Open loader.org for easy editing of the config.
#+BEGIN_SRC emacs-lisp
(defun rk-loader ()
 (interactive)
 (find-file "~/.emacs.d/loader.org"))
#+END_SRC
* UI
** Buffer control

 Make buffer resizing alot more convinient

 #+begin_src emacs-lisp
 (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
 (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
 (global-set-key (kbd "S-C-<down>") 'shrink-window)
 (global-set-key (kbd "S-C-<up>") 'enlarge-window)
 #+end_src

** Editorconfig

#+BEGIN_SRC emacs-lisp
(require 'editorconfig)
  (editorconfig-mode 1)
#+END_SRC

** Keys
 Key binding to use "hippie expand" for text autocompletion
 http://www.emacswiki.org/emacs/HippieExpand
 #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "M-/") 'hippie-expand)
 #+END_SRC
** Misc
 Changes all yes/no questions to y/n type
 #+begin_src emacs-lisp
 (fset 'yes-or-no-p 'y-or-n-p)
 #+end_src

 Use 2 spaces for tabs
 #+begin_src emacs-lisp
 (defun die-tabs ()
   (interactive)
   (set-variable 'tab-width 2)
   (mark-whole-buffer)
   (untabify (region-beginning) (region-end))
   (keyboard-quit))
 #+end_src


No cursor blinking, it's distracting
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src

Full path in title bar
#+begin_src emacs-lisp
(setq-default frame-title-format "%b (%f)")
#+end_src

Don't pop up font menu
#+begin_src emacs-lisp
(global-set-key (kbd "s-t") '(lambda () (interactive)))
#+end_src

No bell
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

#+end_src

Prettier lambda's and fn's
#+begin_src emacs-lisp
(push '(" fn ") prettify-symbols-alist)
(global-prettify-symbols-mode +1)
#+end_src

These customizations change the way emacs looks and disable/enable
some user interface elements. Some useful customizations are
commented out, and begin with the line "CUSTOMIZE". These are more
a matter of preference and may require some fiddling to match your
preferences

Turn off the menu bar at the top of each frame because it's distracting
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+end_src

You can uncomment this to remove the graphical toolbar at the top. After
awhile, you won't need the toolbar.
#+begin_src emacs-lisp
;;(when (fboundp 'tool-bar-mode)
;; (tool-bar-mode -1))
#+end_src

Don't show native OS scroll bars for buffers because they're redundant
#+begin_src emacs-lisp
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
#+end_src

Color Themes
Read http://batsov.com/articles/2012/02/19/color-theming-in-emacs-reloaded/
for a great explanation of emacs color themes.
https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html
for a more technical explanation.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(add-to-list 'load-path "~/.emacs.d/themes")
#+end_src

Increase font size for better readability

#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 130)
#+end_src

Make killing/yanking interact with the clipboard
#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
#+end_src

Shows all options when running apropos. For more info,
https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
#+begin_src emacs-lisp
(setq apropos-do-all t)
#+end_src

Mouse yank commands yank at point instead of at click.
#+begin_src emacs-lisp
(setq mouse-yank-at-point t)
#+end_src

** Navigation
   When several buffers visit identically-named files,
Emacs must give the buffers distinct names. The usual method
for making buffer names unique adds ‘<2>’, ‘<3>’, etc. to the end
of the buffer names (all but one of them).
The forward naming method includes part of the file's directory
name at the beginning of the buffer name
https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html

#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+end_src

Turn on recent file mode so that you can more easily switch to
recently edited files when you first start emacs

#+begin_src emacs-lisp
(setq recentf-save-file (concat user-emacs-directory ".recentf"))
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 40)
#+end_src

ido-mode allows you to more easily navigate choices. For example,
when you want to switch buffers, ido presents you with a list
of buffers in the the mini-buffer. As you start to type a buffer's
name, ido will narrow down the list of buffers to match the text
you've typed in
http://www.emacswiki.org/emacs/InteractivelyDoThings

#+begin_src emacs-lisp
(ido-mode t)
#+end_src

This allows partial matches, e.g. "tl" will match "Tyrion Lannister"

#+begin_src emacs-lisp
(setq ido-enable-flex-matching t)
#+end_src

Turn this behavior off because it's annoying
#+begin_src emacs-lisp
(setq ido-use-filename-at-point nil)
#+end_src

Don't try to match file across all "work" directories; only match files
in the current directory displayed in the minibuffer
#+begin_src emacs-lisp
(setq ido-auto-merge-work-directories-length -1)
#+end_src

Includes buffer names of recently open files, even if they're not
open now
#+begin_src emacs-lisp
(setq ido-use-virtual-buffers t)
#+end_src

This enables ido in all contexts where it could be useful, not just
for selecting buffer and file names
#+begin_src emacs-lisp
(ido-ubiquitous-mode 1)
#+end_src

Display IDO vertically for easier reading
#+begin_src emacs-lisp
(require 'ido-vertical-mode)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

Enhances M-x to allow easier execution of commands. Provides
a filterable list of possible commands in the minibuffer
http://www.emacswiki.org/emacs/Smex

#+begin_src emacs-lisp
(setq smex-save-file (concat user-emacs-directory ".smex-items"))
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
#+end_src

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x o") 'ace-window)
#+END_SRC

Change <return> to open thing at point in current dired buffer instead of opening a new one.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'evil-maps
    (define-key dired-mode-map (kbd "<return>") #'dired-find-alternate-file))
#+END_SRC
