* A secure Emacs environment

Great article why
[[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your editor is
malware]]. The following basically sets up the configuration to adhere to the
articles recommondations.

#+BEGIN_SRC shell :exports none
python -m pip install --user certifi
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;  (if (fboundp 'gnutls-available-p)
  ;;      (fmakunbound 'gnutls-available-p))

  (require 'cl)
  (setq tls-checktrust t)

  (setq python (or (executable-find "py.exe")
                   (executable-find "python")
                   ))

  (let ((trustfile
         (replace-regexp-in-string
          "\\\\" "/"
          (replace-regexp-in-string
           "\n" ""
           (shell-command-to-string (concat python " -m certifi"))))))
    (setq tls-program
          (list
           (format "gnutls-cli%s --x509cafile %s -p %%p %%h"
                   (if (eq window-system 'w32) ".exe" "") trustfile)))
    (setq gnutls-verify-error t)
    (setq gnutls-trustfiles (list trustfile)))

  ;; Test the settings by using the following code snippet:
  ;;  (let ((bad-hosts
  ;;         (loop for bad
  ;;               in `("https://wrong.host.badssl.com/"
  ;;                    "https://self-signed.badssl.com/")
  ;;               if (condition-case e
  ;;                      (url-retrieve
  ;;                       bad (lambda (retrieved) t))
  ;;                    (error nil))
  ;;               collect bad)))
  ;;    (if bad-hosts
  ;;        (error (format "tls misconfigured; retrieved %s ok" bad-hosts))
  ;;      (url-retrieve "https://badssl.com"
  ;;                    (lambda (retrieved) t))))
#+END_SRC

* Locale

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

* Load Path

  Add the lib folder to the load path to enable the loading
of local programs
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lib/")
#+END_SRC

* Editing

Lisp-friendly hippie expand
#+begin_src emacs-lisp
(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))
#+end_src

#+begin_src emacs-lisp
(show-paren-mode 1)
(setq-default indent-tabs-mode nil)
#+end_src

When you visit a file, point goes to the last place where it
was when you previously visited the same file.
http://www.emacswiki.org/emacs/SavePlace

#+begin_src emacs-lisp
(require 'saveplace)
(setq-default save-place t)
;; keep track of saved places in ~/.emacs.d/places
(setq save-place-file (concat user-emacs-directory "places"))
#+end_src

Emacs can automatically create backup files. This tells Emacs to
put all backups in ~/.emacs.d/backups. More info:
http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                              "backups"))))
(setq auto-save-default nil)
#+end_src


Comments
#+begin_src emacs-lisp
(defun toggle-comment-on-line ()
  "comment or uncomment current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
(global-set-key (kbd "C-;") 'toggle-comment-on-line)
#+end_src


Use 2 spaces for tabs
#+begin_src emacs-lisp
(defun die-tabs ()
  (interactive)
  (set-variable 'tab-width 2)
  (mark-whole-buffer)
  (untabify (region-beginning) (region-end))
  (keyboard-quit))
#+end_src

Fix weird os x kill error
#+begin_src emacs-lisp
(defun ns-get-pasteboard ()
  "Returns the value of the pasteboard, or nil for unsupported formats."
  (condition-case nil
      (ns-get-selection-internal 'CLIPBOARD)
    (quit nil)))
#+end_src

* Calendar

Make monday the first day of the week.
#+begin_src emacs-lisp
(setq calendar-week-start-day 1)
#+end_src

* Clojure
** General

This is useful for working with camel-case tokens, like names of
Java classes (e.g. JavaClassName)
#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook 'subword-mode)
#+end_src

#+begin_src emacs-lisp
(require 'clojure-mode-extra-font-locking)

;; syntax hilighting for midje
(add-hook 'clojure-mode-hook
          (lambda ()
            (setq inferior-lisp-program "lein repl")
            (font-lock-add-keywords
             nil
             '(("(\\(facts?\\)"
                (1 font-lock-keyword-face))
               ("(\\(background?\\)"
                (1 font-lock-keyword-face))))
            (define-clojure-indent (fact 1))
            (define-clojure-indent (facts 1))))
#+end_src
** Cider

Provides minibuffer documentation for the code you're typing into the repl
#+begin_src emacs-lisp
; (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
#+end_src

Go right to the REPL buffer when it's finished connecting
#+begin_src emacs-lisp
(setq cider-repl-pop-to-buffer-on-connect t)
#+end_src

When there's a cider error, show its buffer and switch to it
#+begin_src emacs-lisp
(setq cider-show-error-buffer t)
;(setq cider-auto-select-error-buffer t)
#+end_src

Where to store the cider history.
#+begin_src emacs-lisp
(setq cider-repl-history-file "~/.emacs.d/cider-history")
#+end_src

Wrap when navigating history.
#+begin_src emacs-lisp
(setq cider-repl-wrap-history t)
#+end_src

Enable paredit in your REPL
#+begin_src emacs-lisp
(add-hook 'clojure-mode-hook 'enable-paredit-mode)
#+end_src

Use clojure mode for other extensions
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
;; (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
(add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))
#+end_src

#+RESULTS:


Key bindings
#+begin_src emacs-lisp
(defun cider-start-http-server ()
  (interactive)
  (cider-load-current-buffer)
  (let ((ns (cider-current-ns)))
    (cider-repl-set-ns ns)
    (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
    (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))


(defun cider-refresh ()
  (interactive)
  (cider-interactive-eval (format "(user/reset)")))

(defun cider-eval-last-sexp-under-cursor (arg)
  (interactive "p")
  (forward-char)
  (cider-eval-last-sexp)
  (backward-char))

(defun cider-user-ns ()
  (interactive)
  (cider-repl-set-ns "user"))

(with-eval-after-load 'cider
     (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
     (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
     (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
     (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)
     (define-key cider-mode-map (kbd "C-x C-e") 'cider-eval-last-sexp-under-cursor))
#+end_src

** Clojurescript

 Use Nodejs as the default clojurescript repl
#+begin_src emacs-lisp
  '(cider-cljs-lein-repl
     "(do (require 'cljs.repl.node) (cemerick.piggieback/cljs-repl (cljs.repl.node/repl-env)))")
#+end_src

* ClojureScript

#+begin_src emacs-lisp
(setq cider-cljs-lein-repl
      "(do (require 'figwheel-sidecar.repl-api)
           (figwheel-sidecar.repl-api/start-figwheel!)
           (figwheel-sidecar.repl-api/cljs-repl))")
#+end_src

* Elisp

Automatically load paredit when editing a lisp file
More at http://www.emacswiki.org/emacs/ParEdit

#+begin_src emacs-lisp
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+end_src

eldoc-mode shows documentation in the minibuffer when writing code
http://www.emacswiki.org/emacs/ElDoc

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+end_src

* Evil-mode

Fix to make tab expansion work in orgmode.
#+BEGIN_SRC emacs-lisp
(setq evil-want-C-i-jump nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'evil)
  (evil-mode 1)

;; (require 'evil-surround)
  (global-evil-surround-mode 1)
#+END_SRC

Evil binds M-. to evil-repeat-pop-next. But I prefer ciders cider-find-var
so unbind M-. in the evil normal mode.
#+BEGIN_SRC emacs-lisp
(eval-after-load "evil-maps"
  '(progn
     (define-key evil-normal-state-map  "\M-." 'nil)))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
 (require 'evil-adjust)
  (evil-adjust)
#+END_SRC

* Evil-lispy-mode

Modes for reimagining paredit into a more vim like workflow.

https://github.com/abo-abo/lispy
https://github.com/sp3ctum/evil-lispy

#+begin_src emacs-lisp
;; (require 'evil-lispy)
;; (add-hook 'emacs-lisp-mode-hook #'evil-lispy-mode)
;; (add-hook 'clojure-mode-hook #'evil-lispy-mode)
#+end_src

* Editorconfig

#+BEGIN_SRC emacs-lisp
(require 'editorconfig)
  (editorconfig-mode 1)
#+END_SRC

* Fira code


Font with ligatures read more at https://github.com/tonsky/FiraCode

#+begin_src emacs-lisp
;; ;; This works when using emacs --daemon + emacsclient
;; (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
;; ;; This works when using emacs without server/client
;; (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
;; ;; I haven't found one statement that makes both of the above situations work, so I use both for now


(when (window-system)
    (set-default-font "Fira Code"))
  (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                 (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                 (36 . ".\\(?:>\\)")
                 (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                 (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                 (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
                 (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                 (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                 ;; commenting this out to avoid
                 ;; error in process filter: Attempt to shape unibyte text
                 ;; when running cider
                 ;; (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                 (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                 (48 . ".\\(?:x[a-zA-Z]\\)")
                 (58 . ".\\(?:::\\|[:=]\\)")
                 (59 . ".\\(?:;;\\|;\\)")
                 (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                 (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                 (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                 (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                 (91 . ".\\(?:]\\)")
                 (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                 (94 . ".\\(?:=\\)")
                 (119 . ".\\(?:ww\\)")
                 (123 . ".\\(?:-\\)")
                 (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                 (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)"))))
(dolist (char-regexp alist)
  (set-char-table-range composition-function-table (car char-regexp)
                        `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+end_src

* Flycheck

Syntax checking

#+begin_src emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src

* Org-mode
  C-c C-e - export document

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

* Org-reveal

#+begin_src emacs-lisp
(require 'ox-reveal)
#+end_src

* Javascript


#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js$" . js-mode))
(add-to-list 'auto-mode-alist '("\\.jsx$" . js2-jsx-mode))
(add-hook 'js-mode-hook 'subword-mode)
(add-hook 'html-mode-hook 'subword-mode)
(setq js-indent-level 2)
(eval-after-load "sgml-mode"
  '(progn
     (require 'tagedit)
     (tagedit-add-paredit-like-keybindings)
     (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))
#+end_src

* Markdown

#+begin_src emacs-lisp
(autoload 'markdown-mode "markdown-mode"
          "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(autoload 'gfm-mode "gfm-mode"
          "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
#+end_src

* Magit

#+begin_src emacs-lisp
(require 'evil-magit)
#+end_src

* Misc

Changes all yes/no questions to y/n type
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Shell scripts
#+begin_src emacs-lisp
(setq-default sh-basic-offset 2)
(setq-default sh-indentation 2)
#+end_src

No need for ~ files when editing
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

Go straight to scratch buffer on startup
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

Automatically follow symlinks
#+begin_src emacs-lisp
(setq vc-follow-symlinks t)
#+end_src

Delete trailing whitespace on save
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Navigation


When several buffers visit identically-named files,
Emacs must give the buffers distinct names. The usual method
for making buffer names unique adds ‘<2>’, ‘<3>’, etc. to the end
of the buffer names (all but one of them).
The forward naming method includes part of the file's directory
name at the beginning of the buffer name
https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html

#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+end_src

Turn on recent file mode so that you can more easily switch to
recently edited files when you first start emacs

#+begin_src emacs-lisp
(setq recentf-save-file (concat user-emacs-directory ".recentf"))
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 40)
#+end_src

ido-mode allows you to more easily navigate choices. For example,
when you want to switch buffers, ido presents you with a list
of buffers in the the mini-buffer. As you start to type a buffer's
name, ido will narrow down the list of buffers to match the text
you've typed in
http://www.emacswiki.org/emacs/InteractivelyDoThings

#+begin_src emacs-lisp
(ido-mode t)
#+end_src

This allows partial matches, e.g. "tl" will match "Tyrion Lannister"

#+begin_src emacs-lisp
(setq ido-enable-flex-matching t)
#+end_src

Turn this behavior off because it's annoying
#+begin_src emacs-lisp
(setq ido-use-filename-at-point nil)
#+end_src

Don't try to match file across all "work" directories; only match files
in the current directory displayed in the minibuffer
#+begin_src emacs-lisp
(setq ido-auto-merge-work-directories-length -1)
#+end_src

Includes buffer names of recently open files, even if they're not
open now
#+begin_src emacs-lisp
(setq ido-use-virtual-buffers t)
#+end_src

This enables ido in all contexts where it could be useful, not just
for selecting buffer and file names
#+begin_src emacs-lisp
(ido-ubiquitous-mode 1)
#+end_src

Display IDO vertically for easier reading
#+begin_src emacs-lisp
(require 'ido-vertical-mode)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

Shows a list of buffers and make it use evil
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes))
#+end_src

Enhances M-x to allow easier execution of commands. Provides
a filterable list of possible commands in the minibuffer
http://www.emacswiki.org/emacs/Smex

#+begin_src emacs-lisp
(setq smex-save-file (concat user-emacs-directory ".smex-items"))
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
#+end_src

Projectile everywhere!
#+begin_src emacs-lisp
(projectile-global-mode)

#+end_src

* Keys

Interactive search key bindings. By default, C-s runs
isearch-forward, so this swaps the bindings.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

Key binding to use "hippie expand" for text autocompletion
http://www.emacswiki.org/emacs/HippieExpand
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-x o") 'ace-window)
#+END_SRC

* Shell integration

Ever find that a command works in your shell, but not in Emacs?
This happens a lot on OS X, where an Emacs instance started from the GUI inherits a default set of environment variables.
This library solves this problem by copying important environment variables from the user's shell: it works by asking your shell to print out the variables of interest, then copying them into the Emacs environment.

For more info see:
https://github.com/purcell/exec-path-from-shell

#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-envs
   '("PATH")))
#+END_SRC

* Slime

Sets the slime compiler to use Steelbank common lisp
#+BEGIN_SRC emacs-lisp
(setq inferior-lisp-program "/usr/local/bin/sbcl")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(eval-after-load "slime"
  '(progn
     (slime-setup '(
                    slime-asdf
                    slime-autodoc
                    slime-editing-commands
                    slime-fancy-inspector
                    slime-fontifying-fu
                    slime-fuzzy
                    slime-indentation
                    slime-mdot-fu
                    slime-package-fu
                    slime-references
                    slime-repl
                    slime-sbcl-exts
                    slime-scratch
                    slime-xref-browser
                    ))
     (slime-autodoc-mode)
     (setq slime-complete-symbol*-fancy t)
     (setq slime-complete-symbol-function
  'slime-fuzzy-complete-symbol)))

(require 'slime)
#+END_SRC

* UI

Prettier lambda's and fn's
#+begin_src emacs-lisp
(push '(" fn ") prettify-symbols-alist)
(global-prettify-symbols-mode +1)
#+end_src

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
#+end_src

#+begin_src emacs-lisp
(if (display-graphic-p)
  (load-theme 'arjen-grey t)
  (load-theme 'spacemacs-light t))
#+end_src

These customizations change the way emacs looks and disable/enable
some user interface elements. Some useful customizations are
commented out, and begin with the line "CUSTOMIZE". These are more
a matter of preference and may require some fiddling to match your
preferences

Turn off the menu bar at the top of each frame because it's distracting
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+end_src

You can uncomment this to remove the graphical toolbar at the top. After
awhile, you won't need the toolbar.
#+begin_src emacs-lisp
;;(when (fboundp 'tool-bar-mode)
;; (tool-bar-mode -1))
#+end_src

Don't show native OS scroll bars for buffers because they're redundant
#+begin_src emacs-lisp
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
#+end_src

Color Themes
Read http://batsov.com/articles/2012/02/19/color-theming-in-emacs-reloaded/
for a great explanation of emacs color themes.
https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html
for a more technical explanation.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(add-to-list 'load-path "~/.emacs.d/themes")
#+end_src

Increase font size for better readability

#+begin_src emacs-lisp
;;(set-face-attribute 'default nil :height 140)
#+end_src

Uncomment the lines below by removing semicolons and play with the
values in order to set the width (in characters wide) and height

#+begin_src emacs-lisp
;; (in lines high) Emacs will have whenever you start it
;; (setq initial-frame-alist '((top . 0) (left . 0) (width . 177) (height . 53)))
#+end_src

Make killing/yanking interact with the clipboard
#+begin_src emacs-lisp
(setq x-select-enable-clipboard t)
#+end_src

I'm actually not sure what this does but it's recommended?
#+begin_src emacs-lisp
(setq x-select-enable-primary t)
#+end_src

Save clipboard strings into kill ring before replacing them.
When one selects something in another program to paste it into Emacs,
but kills something in Emacs before actually pasting it,
this selection is gone unless this variable is non-nil
#+begin_src emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+end_src

Shows all options when running apropos. For more info,
https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
#+begin_src emacs-lisp
(setq apropos-do-all t)
#+end_src

Mouse yank commands yank at point instead of at click.
#+begin_src emacs-lisp
(setq mouse-yank-at-point t)
#+end_src

No cursor blinking, it's distracting
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src

Full path in title bar
#+begin_src emacs-lisp
(setq-default frame-title-format "%b (%f)")
#+end_src

Don't pop up font menu
#+begin_src emacs-lisp
(global-set-key (kbd "s-t") '(lambda () (interactive)))
#+end_src

No bell
#+begin_src emacs-lisp
(setq ring-bell-function 'ignore)
#+end_src

#+end_src

* Window control

Make window resizing alot more convinient

#+begin_src emacs-lisp
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+end_src

* Executable buffers

Make buffers with a shebang executable
#+begin_src emacs-lisp
(add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
#+end_src
